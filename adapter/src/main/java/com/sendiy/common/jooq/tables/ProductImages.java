/*
 * This file is generated by jOOQ.
 */
package com.sendiy.common.jooq.tables;


import com.sendiy.common.jooq.Keys;
import com.sendiy.common.jooq.Public;
import com.sendiy.common.jooq.tables.Files.FilesPath;
import com.sendiy.common.jooq.tables.ProductImages.ProductImagesPath;
import com.sendiy.common.jooq.tables.Products.ProductsPath;
import com.sendiy.common.jooq.tables.records.ProductImagesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductImages extends TableImpl<ProductImagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_images</code>
     */
    public static final ProductImages PRODUCT_IMAGES = new ProductImages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductImagesRecord> getRecordType() {
        return ProductImagesRecord.class;
    }

    /**
     * The column <code>public.product_images.id</code>.
     */
    public final TableField<ProductImagesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.product_images.medium_id</code>.
     */
    public final TableField<ProductImagesRecord, Long> MEDIUM_ID = createField(DSL.name("medium_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.product_images.small_id</code>.
     */
    public final TableField<ProductImagesRecord, Long> SMALL_ID = createField(DSL.name("small_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.product_images.product_id</code>.
     */
    public final TableField<ProductImagesRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.product_images.file_id</code>.
     */
    public final TableField<ProductImagesRecord, UUID> FILE_ID = createField(DSL.name("file_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.product_images.is_primary</code>.
     */
    public final TableField<ProductImagesRecord, Boolean> IS_PRIMARY = createField(DSL.name("is_primary"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private ProductImages(Name alias, Table<ProductImagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductImages(Name alias, Table<ProductImagesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_images</code> table reference
     */
    public ProductImages(String alias) {
        this(DSL.name(alias), PRODUCT_IMAGES);
    }

    /**
     * Create an aliased <code>public.product_images</code> table reference
     */
    public ProductImages(Name alias) {
        this(alias, PRODUCT_IMAGES);
    }

    /**
     * Create a <code>public.product_images</code> table reference
     */
    public ProductImages() {
        this(DSL.name("product_images"), null);
    }

    public <O extends Record> ProductImages(Table<O> path, ForeignKey<O, ProductImagesRecord> childPath, InverseForeignKey<O, ProductImagesRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT_IMAGES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductImagesPath extends ProductImages implements Path<ProductImagesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductImagesPath(Table<O> path, ForeignKey<O, ProductImagesRecord> childPath, InverseForeignKey<O, ProductImagesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductImagesPath(Name alias, Table<ProductImagesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductImagesPath as(String alias) {
            return new ProductImagesPath(DSL.name(alias), this);
        }

        @Override
        public ProductImagesPath as(Name alias) {
            return new ProductImagesPath(alias, this);
        }

        @Override
        public ProductImagesPath as(Table<?> alias) {
            return new ProductImagesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductImagesRecord, Long> getIdentity() {
        return (Identity<ProductImagesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductImagesRecord> getPrimaryKey() {
        return Keys.PRODUCT_IMAGES_PKEY;
    }

    @Override
    public List<ForeignKey<ProductImagesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_MEDIUM_ID_FKEY, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_SMALL_ID_FKEY, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_PRODUCT_ID_FKEY, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_FILE_ID_FKEY);
    }

    private transient ProductImagesPath _productImagesMediumIdFkey;

    /**
     * Get the implicit join path to the <code>public.product_images</code>
     * table, via the <code>product_images_medium_id_fkey</code> key.
     */
    public ProductImagesPath productImagesMediumIdFkey() {
        if (_productImagesMediumIdFkey == null)
            _productImagesMediumIdFkey = new ProductImagesPath(this, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_MEDIUM_ID_FKEY, null);

        return _productImagesMediumIdFkey;
    }

    private transient ProductImagesPath _productImagesSmallIdFkey;

    /**
     * Get the implicit join path to the <code>public.product_images</code>
     * table, via the <code>product_images_small_id_fkey</code> key.
     */
    public ProductImagesPath productImagesSmallIdFkey() {
        if (_productImagesSmallIdFkey == null)
            _productImagesSmallIdFkey = new ProductImagesPath(this, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_SMALL_ID_FKEY, null);

        return _productImagesSmallIdFkey;
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_PRODUCT_ID_FKEY, null);

        return _products;
    }

    private transient FilesPath _files;

    /**
     * Get the implicit join path to the <code>public.files</code> table.
     */
    public FilesPath files() {
        if (_files == null)
            _files = new FilesPath(this, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_FILE_ID_FKEY, null);

        return _files;
    }

    @Override
    public ProductImages as(String alias) {
        return new ProductImages(DSL.name(alias), this);
    }

    @Override
    public ProductImages as(Name alias) {
        return new ProductImages(alias, this);
    }

    @Override
    public ProductImages as(Table<?> alias) {
        return new ProductImages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductImages rename(String name) {
        return new ProductImages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductImages rename(Name name) {
        return new ProductImages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductImages rename(Table<?> name) {
        return new ProductImages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductImages where(Condition condition) {
        return new ProductImages(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductImages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductImages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductImages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductImages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductImages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductImages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductImages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductImages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductImages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
