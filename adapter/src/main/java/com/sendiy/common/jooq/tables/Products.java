/*
 * This file is generated by jOOQ.
 */
package com.sendiy.common.jooq.tables;


import com.sendiy.common.jooq.Keys;
import com.sendiy.common.jooq.Public;
import com.sendiy.common.jooq.tables.CartItems.CartItemsPath;
import com.sendiy.common.jooq.tables.Categories.CategoriesPath;
import com.sendiy.common.jooq.tables.Favorites.FavoritesPath;
import com.sendiy.common.jooq.tables.OrderItems.OrderItemsPath;
import com.sendiy.common.jooq.tables.ProductImages.ProductImagesPath;
import com.sendiy.common.jooq.tables.Reviews.ReviewsPath;
import com.sendiy.common.jooq.tables.Shops.ShopsPath;
import com.sendiy.common.jooq.tables.Users.UsersPath;
import com.sendiy.common.jooq.tables.records.ProductsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>public.products.id</code>.
     */
    public final TableField<ProductsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.products.title</code>.
     */
    public final TableField<ProductsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.products.user_id</code>.
     */
    public final TableField<ProductsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.products.description</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.products.price</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.products.quantity</code>.
     */
    public final TableField<ProductsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.products.shop_id</code>.
     */
    public final TableField<ProductsRecord, UUID> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.products.category_id</code>.
     */
    public final TableField<ProductsRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.products.created_at</code>.
     */
    public final TableField<ProductsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.products.created_by</code>.
     */
    public final TableField<ProductsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.products.modified_at</code>.
     */
    public final TableField<ProductsRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.products.modified_by</code>.
     */
    public final TableField<ProductsRecord, UUID> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.products.deleted_date</code>.
     */
    public final TableField<ProductsRecord, LocalDateTime> DELETED_DATE = createField(DSL.name("deleted_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.products.is_active</code>.
     */
    public final TableField<ProductsRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    /**
     * Create a <code>public.products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    public <O extends Record> Products(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductsPath extends Products implements Path<ProductsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductsPath(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductsPath(Name alias, Table<ProductsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductsPath as(String alias) {
            return new ProductsPath(DSL.name(alias), this);
        }

        @Override
        public ProductsPath as(Name alias) {
            return new ProductsPath(alias, this);
        }

        @Override
        public ProductsPath as(Table<?> alias) {
            return new ProductsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PKEY;
    }

    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTS__PRODUCTS_USER_ID_FKEY, Keys.PRODUCTS__PRODUCTS_SHOP_ID_FKEY, Keys.PRODUCTS__PRODUCTS_CATEGORY_ID_FKEY, Keys.PRODUCTS__PRODUCTS_CREATED_BY_FKEY, Keys.PRODUCTS__PRODUCTS_MODIFIED_BY_FKEY);
    }

    private transient UsersPath _productsUserIdFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>products_user_id_fkey</code> key.
     */
    public UsersPath productsUserIdFkey() {
        if (_productsUserIdFkey == null)
            _productsUserIdFkey = new UsersPath(this, Keys.PRODUCTS__PRODUCTS_USER_ID_FKEY, null);

        return _productsUserIdFkey;
    }

    private transient ShopsPath _shops;

    /**
     * Get the implicit join path to the <code>public.shops</code> table.
     */
    public ShopsPath shops() {
        if (_shops == null)
            _shops = new ShopsPath(this, Keys.PRODUCTS__PRODUCTS_SHOP_ID_FKEY, null);

        return _shops;
    }

    private transient CategoriesPath _categories;

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public CategoriesPath categories() {
        if (_categories == null)
            _categories = new CategoriesPath(this, Keys.PRODUCTS__PRODUCTS_CATEGORY_ID_FKEY, null);

        return _categories;
    }

    private transient UsersPath _productsCreatedByFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>products_created_by_fkey</code> key.
     */
    public UsersPath productsCreatedByFkey() {
        if (_productsCreatedByFkey == null)
            _productsCreatedByFkey = new UsersPath(this, Keys.PRODUCTS__PRODUCTS_CREATED_BY_FKEY, null);

        return _productsCreatedByFkey;
    }

    private transient UsersPath _productsModifiedByFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>products_modified_by_fkey</code> key.
     */
    public UsersPath productsModifiedByFkey() {
        if (_productsModifiedByFkey == null)
            _productsModifiedByFkey = new UsersPath(this, Keys.PRODUCTS__PRODUCTS_MODIFIED_BY_FKEY, null);

        return _productsModifiedByFkey;
    }

    private transient CartItemsPath _cartItems;

    /**
     * Get the implicit to-many join path to the <code>public.cart_items</code>
     * table
     */
    public CartItemsPath cartItems() {
        if (_cartItems == null)
            _cartItems = new CartItemsPath(this, null, Keys.CART_ITEMS__CART_ITEMS_PRODUCT_ID_FKEY.getInverseKey());

        return _cartItems;
    }

    private transient FavoritesPath _favorites;

    /**
     * Get the implicit to-many join path to the <code>public.favorites</code>
     * table
     */
    public FavoritesPath favorites() {
        if (_favorites == null)
            _favorites = new FavoritesPath(this, null, Keys.FAVORITES__FAVORITES_PRODUCT_ID_FKEY.getInverseKey());

        return _favorites;
    }

    private transient OrderItemsPath _orderItems;

    /**
     * Get the implicit to-many join path to the <code>public.order_items</code>
     * table
     */
    public OrderItemsPath orderItems() {
        if (_orderItems == null)
            _orderItems = new OrderItemsPath(this, null, Keys.ORDER_ITEMS__ORDER_ITEMS_PRODUCT_ID_FKEY.getInverseKey());

        return _orderItems;
    }

    private transient ProductImagesPath _productImages;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_images</code> table
     */
    public ProductImagesPath productImages() {
        if (_productImages == null)
            _productImages = new ProductImagesPath(this, null, Keys.PRODUCT_IMAGES__PRODUCT_IMAGES_PRODUCT_ID_FKEY.getInverseKey());

        return _productImages;
    }

    private transient ReviewsPath _reviews;

    /**
     * Get the implicit to-many join path to the <code>public.reviews</code>
     * table
     */
    public ReviewsPath reviews() {
        if (_reviews == null)
            _reviews = new ReviewsPath(this, null, Keys.REVIEWS__REVIEWS_PRODUCT_ID_FKEY.getInverseKey());

        return _reviews;
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    @Override
    public Products as(Table<?> alias) {
        return new Products(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Table<?> name) {
        return new Products(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition condition) {
        return new Products(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
