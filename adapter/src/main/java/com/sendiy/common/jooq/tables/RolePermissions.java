/*
 * This file is generated by jOOQ.
 */
package com.sendiy.common.jooq.tables;


import com.sendiy.common.jooq.Keys;
import com.sendiy.common.jooq.Public;
import com.sendiy.common.jooq.tables.Roles.RolesPath;
import com.sendiy.common.jooq.tables.records.RolePermissionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolePermissions extends TableImpl<RolePermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.role_permissions</code>
     */
    public static final RolePermissions ROLE_PERMISSIONS = new RolePermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolePermissionsRecord> getRecordType() {
        return RolePermissionsRecord.class;
    }

    /**
     * The column <code>public.role_permissions.role_id</code>.
     */
    public final TableField<RolePermissionsRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.role_permissions.permission</code>.
     */
    public final TableField<RolePermissionsRecord, String> PERMISSION = createField(DSL.name("permission"), SQLDataType.VARCHAR(128), this, "");

    private RolePermissions(Name alias, Table<RolePermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RolePermissions(Name alias, Table<RolePermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.role_permissions</code> table reference
     */
    public RolePermissions(String alias) {
        this(DSL.name(alias), ROLE_PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.role_permissions</code> table reference
     */
    public RolePermissions(Name alias) {
        this(alias, ROLE_PERMISSIONS);
    }

    /**
     * Create a <code>public.role_permissions</code> table reference
     */
    public RolePermissions() {
        this(DSL.name("role_permissions"), null);
    }

    public <O extends Record> RolePermissions(Table<O> path, ForeignKey<O, RolePermissionsRecord> childPath, InverseForeignKey<O, RolePermissionsRecord> parentPath) {
        super(path, childPath, parentPath, ROLE_PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RolePermissionsPath extends RolePermissions implements Path<RolePermissionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RolePermissionsPath(Table<O> path, ForeignKey<O, RolePermissionsRecord> childPath, InverseForeignKey<O, RolePermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RolePermissionsPath(Name alias, Table<RolePermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RolePermissionsPath as(String alias) {
            return new RolePermissionsPath(DSL.name(alias), this);
        }

        @Override
        public RolePermissionsPath as(Name alias) {
            return new RolePermissionsPath(alias, this);
        }

        @Override
        public RolePermissionsPath as(Table<?> alias) {
            return new RolePermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<RolePermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROLE_PERMISSIONS__ROLE_PERMISSIONS_ROLE_ID_FKEY);
    }

    private transient RolesPath _roles;

    /**
     * Get the implicit join path to the <code>public.roles</code> table.
     */
    public RolesPath roles() {
        if (_roles == null)
            _roles = new RolesPath(this, Keys.ROLE_PERMISSIONS__ROLE_PERMISSIONS_ROLE_ID_FKEY, null);

        return _roles;
    }

    @Override
    public RolePermissions as(String alias) {
        return new RolePermissions(DSL.name(alias), this);
    }

    @Override
    public RolePermissions as(Name alias) {
        return new RolePermissions(alias, this);
    }

    @Override
    public RolePermissions as(Table<?> alias) {
        return new RolePermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissions rename(String name) {
        return new RolePermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissions rename(Name name) {
        return new RolePermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissions rename(Table<?> name) {
        return new RolePermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissions where(Condition condition) {
        return new RolePermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
