/*
 * This file is generated by jOOQ.
 */
package com.sendiy.common.jooq.tables;


import com.sendiy.common.jooq.Keys;
import com.sendiy.common.jooq.Public;
import com.sendiy.common.jooq.enums.ShopStatus;
import com.sendiy.common.jooq.tables.Products.ProductsPath;
import com.sendiy.common.jooq.tables.Users.UsersPath;
import com.sendiy.common.jooq.tables.records.ShopsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shops extends TableImpl<ShopsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.shops</code>
     */
    public static final Shops SHOPS = new Shops();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopsRecord> getRecordType() {
        return ShopsRecord.class;
    }

    /**
     * The column <code>public.shops.id</code>.
     */
    public final TableField<ShopsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.shops.name</code>.
     */
    public final TableField<ShopsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.shops.description</code>.
     */
    public final TableField<ShopsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.shops.status</code>.
     */
    public final TableField<ShopsRecord, ShopStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.defaultValue(DSL.field(DSL.raw("'ACTIVE'::shop_status"), SQLDataType.VARCHAR)).asEnumDataType(ShopStatus.class), this, "");

    /**
     * The column <code>public.shops.user_id</code>.
     */
    public final TableField<ShopsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.shops.created_at</code>.
     */
    public final TableField<ShopsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.shops.created_by</code>.
     */
    public final TableField<ShopsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.shops.modified_at</code>.
     */
    public final TableField<ShopsRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.shops.modified_by</code>.
     */
    public final TableField<ShopsRecord, UUID> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.shops.deleted_date</code>.
     */
    public final TableField<ShopsRecord, LocalDateTime> DELETED_DATE = createField(DSL.name("deleted_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private Shops(Name alias, Table<ShopsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Shops(Name alias, Table<ShopsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.shops</code> table reference
     */
    public Shops(String alias) {
        this(DSL.name(alias), SHOPS);
    }

    /**
     * Create an aliased <code>public.shops</code> table reference
     */
    public Shops(Name alias) {
        this(alias, SHOPS);
    }

    /**
     * Create a <code>public.shops</code> table reference
     */
    public Shops() {
        this(DSL.name("shops"), null);
    }

    public <O extends Record> Shops(Table<O> path, ForeignKey<O, ShopsRecord> childPath, InverseForeignKey<O, ShopsRecord> parentPath) {
        super(path, childPath, parentPath, SHOPS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShopsPath extends Shops implements Path<ShopsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ShopsPath(Table<O> path, ForeignKey<O, ShopsRecord> childPath, InverseForeignKey<O, ShopsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShopsPath(Name alias, Table<ShopsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShopsPath as(String alias) {
            return new ShopsPath(DSL.name(alias), this);
        }

        @Override
        public ShopsPath as(Name alias) {
            return new ShopsPath(alias, this);
        }

        @Override
        public ShopsPath as(Table<?> alias) {
            return new ShopsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ShopsRecord> getPrimaryKey() {
        return Keys.SHOPS_PKEY;
    }

    @Override
    public List<ForeignKey<ShopsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHOPS__SHOPS_USER_ID_FKEY, Keys.SHOPS__SHOPS_CREATED_BY_FKEY, Keys.SHOPS__SHOPS_MODIFIED_BY_FKEY);
    }

    private transient UsersPath _shopsUserIdFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>shops_user_id_fkey</code> key.
     */
    public UsersPath shopsUserIdFkey() {
        if (_shopsUserIdFkey == null)
            _shopsUserIdFkey = new UsersPath(this, Keys.SHOPS__SHOPS_USER_ID_FKEY, null);

        return _shopsUserIdFkey;
    }

    private transient UsersPath _shopsCreatedByFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>shops_created_by_fkey</code> key.
     */
    public UsersPath shopsCreatedByFkey() {
        if (_shopsCreatedByFkey == null)
            _shopsCreatedByFkey = new UsersPath(this, Keys.SHOPS__SHOPS_CREATED_BY_FKEY, null);

        return _shopsCreatedByFkey;
    }

    private transient UsersPath _shopsModifiedByFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>shops_modified_by_fkey</code> key.
     */
    public UsersPath shopsModifiedByFkey() {
        if (_shopsModifiedByFkey == null)
            _shopsModifiedByFkey = new UsersPath(this, Keys.SHOPS__SHOPS_MODIFIED_BY_FKEY, null);

        return _shopsModifiedByFkey;
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit to-many join path to the <code>public.products</code>
     * table
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, null, Keys.PRODUCTS__PRODUCTS_SHOP_ID_FKEY.getInverseKey());

        return _products;
    }

    @Override
    public Shops as(String alias) {
        return new Shops(DSL.name(alias), this);
    }

    @Override
    public Shops as(Name alias) {
        return new Shops(alias, this);
    }

    @Override
    public Shops as(Table<?> alias) {
        return new Shops(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(String name) {
        return new Shops(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(Name name) {
        return new Shops(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(Table<?> name) {
        return new Shops(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Condition condition) {
        return new Shops(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
