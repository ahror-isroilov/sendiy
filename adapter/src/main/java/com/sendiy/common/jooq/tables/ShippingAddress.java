/*
 * This file is generated by jOOQ.
 */
package com.sendiy.common.jooq.tables;


import com.sendiy.common.jooq.Keys;
import com.sendiy.common.jooq.Public;
import com.sendiy.common.jooq.tables.Users.UsersPath;
import com.sendiy.common.jooq.tables.records.ShippingAddressRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShippingAddress extends TableImpl<ShippingAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.shipping_address</code>
     */
    public static final ShippingAddress SHIPPING_ADDRESS = new ShippingAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShippingAddressRecord> getRecordType() {
        return ShippingAddressRecord.class;
    }

    /**
     * The column <code>public.shipping_address.id</code>.
     */
    public final TableField<ShippingAddressRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.shipping_address.user_id</code>.
     */
    public final TableField<ShippingAddressRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.shipping_address.recipient_name</code>.
     */
    public final TableField<ShippingAddressRecord, String> RECIPIENT_NAME = createField(DSL.name("recipient_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.shipping_address.region</code>.
     */
    public final TableField<ShippingAddressRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.shipping_address.district</code>.
     */
    public final TableField<ShippingAddressRecord, String> DISTRICT = createField(DSL.name("district"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.shipping_address.city</code>.
     */
    public final TableField<ShippingAddressRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.shipping_address.street</code>.
     */
    public final TableField<ShippingAddressRecord, String> STREET = createField(DSL.name("street"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.shipping_address.home_number</code>.
     */
    public final TableField<ShippingAddressRecord, Integer> HOME_NUMBER = createField(DSL.name("home_number"), SQLDataType.INTEGER, this, "");

    private ShippingAddress(Name alias, Table<ShippingAddressRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ShippingAddress(Name alias, Table<ShippingAddressRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.shipping_address</code> table reference
     */
    public ShippingAddress(String alias) {
        this(DSL.name(alias), SHIPPING_ADDRESS);
    }

    /**
     * Create an aliased <code>public.shipping_address</code> table reference
     */
    public ShippingAddress(Name alias) {
        this(alias, SHIPPING_ADDRESS);
    }

    /**
     * Create a <code>public.shipping_address</code> table reference
     */
    public ShippingAddress() {
        this(DSL.name("shipping_address"), null);
    }

    public <O extends Record> ShippingAddress(Table<O> path, ForeignKey<O, ShippingAddressRecord> childPath, InverseForeignKey<O, ShippingAddressRecord> parentPath) {
        super(path, childPath, parentPath, SHIPPING_ADDRESS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShippingAddressPath extends ShippingAddress implements Path<ShippingAddressRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ShippingAddressPath(Table<O> path, ForeignKey<O, ShippingAddressRecord> childPath, InverseForeignKey<O, ShippingAddressRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShippingAddressPath(Name alias, Table<ShippingAddressRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShippingAddressPath as(String alias) {
            return new ShippingAddressPath(DSL.name(alias), this);
        }

        @Override
        public ShippingAddressPath as(Name alias) {
            return new ShippingAddressPath(alias, this);
        }

        @Override
        public ShippingAddressPath as(Table<?> alias) {
            return new ShippingAddressPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ShippingAddressRecord, Long> getIdentity() {
        return (Identity<ShippingAddressRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShippingAddressRecord> getPrimaryKey() {
        return Keys.SHIPPING_ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<ShippingAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHIPPING_ADDRESS__SHIPPING_ADDRESS_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.SHIPPING_ADDRESS__SHIPPING_ADDRESS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public ShippingAddress as(String alias) {
        return new ShippingAddress(DSL.name(alias), this);
    }

    @Override
    public ShippingAddress as(Name alias) {
        return new ShippingAddress(alias, this);
    }

    @Override
    public ShippingAddress as(Table<?> alias) {
        return new ShippingAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingAddress rename(String name) {
        return new ShippingAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingAddress rename(Name name) {
        return new ShippingAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShippingAddress rename(Table<?> name) {
        return new ShippingAddress(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShippingAddress where(Condition condition) {
        return new ShippingAddress(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShippingAddress where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShippingAddress where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShippingAddress where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShippingAddress where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShippingAddress where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShippingAddress where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShippingAddress where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShippingAddress whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShippingAddress whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
