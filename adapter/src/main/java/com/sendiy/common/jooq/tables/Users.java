/*
 * This file is generated by jOOQ.
 */
package com.sendiy.common.jooq.tables;


import com.sendiy.common.jooq.Keys;
import com.sendiy.common.jooq.Public;
import com.sendiy.common.jooq.enums.UserStatus;
import com.sendiy.common.jooq.tables.Carts.CartsPath;
import com.sendiy.common.jooq.tables.Favorites.FavoritesPath;
import com.sendiy.common.jooq.tables.Files.FilesPath;
import com.sendiy.common.jooq.tables.Orders.OrdersPath;
import com.sendiy.common.jooq.tables.Products.ProductsPath;
import com.sendiy.common.jooq.tables.Reviews.ReviewsPath;
import com.sendiy.common.jooq.tables.Roles.RolesPath;
import com.sendiy.common.jooq.tables.ShippingAddress.ShippingAddressPath;
import com.sendiy.common.jooq.tables.Shops.ShopsPath;
import com.sendiy.common.jooq.tables.Users.UsersPath;
import com.sendiy.common.jooq.tables.records.UsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * this is general user table
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>public.users.id</code>.
     */
    public final TableField<UsersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.users.firstname</code>.
     */
    public final TableField<UsersRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.users.lastname</code>.
     */
    public final TableField<UsersRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.users.phone</code>.
     */
    public final TableField<UsersRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.users.password_hash</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users.role_id</code>.
     */
    public final TableField<UsersRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users.avatar_id</code>.
     */
    public final TableField<UsersRecord, UUID> AVATAR_ID = createField(DSL.name("avatar_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.users.bio</code>.
     */
    public final TableField<UsersRecord, String> BIO = createField(DSL.name("bio"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.status</code>.
     */
    public final TableField<UsersRecord, UserStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(UserStatus.class), this, "");

    /**
     * The column <code>public.users.created_at</code>.
     */
    public final TableField<UsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.users.created_by</code>.
     */
    public final TableField<UsersRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.users.modified_at</code>.
     */
    public final TableField<UsersRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.users.modified_by</code>.
     */
    public final TableField<UsersRecord, UUID> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.users.deleted_date</code>.
     */
    public final TableField<UsersRecord, LocalDateTime> DELETED_DATE = createField(DSL.name("deleted_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("this is general user table"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>public.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersPath extends Users implements Path<UsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsersPath(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersPath(Name alias, Table<UsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersPath as(String alias) {
            return new UsersPath(DSL.name(alias), this);
        }

        @Override
        public UsersPath as(Name alias) {
            return new UsersPath(alias, this);
        }

        @Override
        public UsersPath as(Table<?> alias) {
            return new UsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS__USERS_ROLE_ID_FKEY, Keys.USERS__USERS_AVATAR_ID_FKEY, Keys.USERS__USERS_CREATED_BY_FKEY, Keys.USERS__USERS_MODIFIED_BY_FKEY);
    }

    private transient RolesPath _roles;

    /**
     * Get the implicit join path to the <code>public.roles</code> table.
     */
    public RolesPath roles() {
        if (_roles == null)
            _roles = new RolesPath(this, Keys.USERS__USERS_ROLE_ID_FKEY, null);

        return _roles;
    }

    private transient FilesPath _files;

    /**
     * Get the implicit join path to the <code>public.files</code> table.
     */
    public FilesPath files() {
        if (_files == null)
            _files = new FilesPath(this, Keys.USERS__USERS_AVATAR_ID_FKEY, null);

        return _files;
    }

    private transient UsersPath _usersCreatedByFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>users_created_by_fkey</code> key.
     */
    public UsersPath usersCreatedByFkey() {
        if (_usersCreatedByFkey == null)
            _usersCreatedByFkey = new UsersPath(this, Keys.USERS__USERS_CREATED_BY_FKEY, null);

        return _usersCreatedByFkey;
    }

    private transient UsersPath _usersModifiedByFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>users_modified_by_fkey</code> key.
     */
    public UsersPath usersModifiedByFkey() {
        if (_usersModifiedByFkey == null)
            _usersModifiedByFkey = new UsersPath(this, Keys.USERS__USERS_MODIFIED_BY_FKEY, null);

        return _usersModifiedByFkey;
    }

    private transient CartsPath _cartsCreatedByFkey;

    /**
     * Get the implicit to-many join path to the <code>public.carts</code>
     * table, via the <code>carts_created_by_fkey</code> key
     */
    public CartsPath cartsCreatedByFkey() {
        if (_cartsCreatedByFkey == null)
            _cartsCreatedByFkey = new CartsPath(this, null, Keys.CARTS__CARTS_CREATED_BY_FKEY.getInverseKey());

        return _cartsCreatedByFkey;
    }

    private transient CartsPath _cartsUserIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.carts</code>
     * table, via the <code>carts_user_id_fkey</code> key
     */
    public CartsPath cartsUserIdFkey() {
        if (_cartsUserIdFkey == null)
            _cartsUserIdFkey = new CartsPath(this, null, Keys.CARTS__CARTS_USER_ID_FKEY.getInverseKey());

        return _cartsUserIdFkey;
    }

    private transient FavoritesPath _favorites;

    /**
     * Get the implicit to-many join path to the <code>public.favorites</code>
     * table
     */
    public FavoritesPath favorites() {
        if (_favorites == null)
            _favorites = new FavoritesPath(this, null, Keys.FAVORITES__FAVORITES_USER_ID_FKEY.getInverseKey());

        return _favorites;
    }

    private transient OrdersPath _ordersCreatedByFkey;

    /**
     * Get the implicit to-many join path to the <code>public.orders</code>
     * table, via the <code>orders_created_by_fkey</code> key
     */
    public OrdersPath ordersCreatedByFkey() {
        if (_ordersCreatedByFkey == null)
            _ordersCreatedByFkey = new OrdersPath(this, null, Keys.ORDERS__ORDERS_CREATED_BY_FKEY.getInverseKey());

        return _ordersCreatedByFkey;
    }

    private transient OrdersPath _ordersUserIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.orders</code>
     * table, via the <code>orders_user_id_fkey</code> key
     */
    public OrdersPath ordersUserIdFkey() {
        if (_ordersUserIdFkey == null)
            _ordersUserIdFkey = new OrdersPath(this, null, Keys.ORDERS__ORDERS_USER_ID_FKEY.getInverseKey());

        return _ordersUserIdFkey;
    }

    private transient ProductsPath _productsCreatedByFkey;

    /**
     * Get the implicit to-many join path to the <code>public.products</code>
     * table, via the <code>products_created_by_fkey</code> key
     */
    public ProductsPath productsCreatedByFkey() {
        if (_productsCreatedByFkey == null)
            _productsCreatedByFkey = new ProductsPath(this, null, Keys.PRODUCTS__PRODUCTS_CREATED_BY_FKEY.getInverseKey());

        return _productsCreatedByFkey;
    }

    private transient ProductsPath _productsModifiedByFkey;

    /**
     * Get the implicit to-many join path to the <code>public.products</code>
     * table, via the <code>products_modified_by_fkey</code> key
     */
    public ProductsPath productsModifiedByFkey() {
        if (_productsModifiedByFkey == null)
            _productsModifiedByFkey = new ProductsPath(this, null, Keys.PRODUCTS__PRODUCTS_MODIFIED_BY_FKEY.getInverseKey());

        return _productsModifiedByFkey;
    }

    private transient ProductsPath _productsUserIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.products</code>
     * table, via the <code>products_user_id_fkey</code> key
     */
    public ProductsPath productsUserIdFkey() {
        if (_productsUserIdFkey == null)
            _productsUserIdFkey = new ProductsPath(this, null, Keys.PRODUCTS__PRODUCTS_USER_ID_FKEY.getInverseKey());

        return _productsUserIdFkey;
    }

    private transient ReviewsPath _reviewsCreatedByFkey;

    /**
     * Get the implicit to-many join path to the <code>public.reviews</code>
     * table, via the <code>reviews_created_by_fkey</code> key
     */
    public ReviewsPath reviewsCreatedByFkey() {
        if (_reviewsCreatedByFkey == null)
            _reviewsCreatedByFkey = new ReviewsPath(this, null, Keys.REVIEWS__REVIEWS_CREATED_BY_FKEY.getInverseKey());

        return _reviewsCreatedByFkey;
    }

    private transient ReviewsPath _reviewsUserIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.reviews</code>
     * table, via the <code>reviews_user_id_fkey</code> key
     */
    public ReviewsPath reviewsUserIdFkey() {
        if (_reviewsUserIdFkey == null)
            _reviewsUserIdFkey = new ReviewsPath(this, null, Keys.REVIEWS__REVIEWS_USER_ID_FKEY.getInverseKey());

        return _reviewsUserIdFkey;
    }

    private transient ShippingAddressPath _shippingAddress;

    /**
     * Get the implicit to-many join path to the
     * <code>public.shipping_address</code> table
     */
    public ShippingAddressPath shippingAddress() {
        if (_shippingAddress == null)
            _shippingAddress = new ShippingAddressPath(this, null, Keys.SHIPPING_ADDRESS__SHIPPING_ADDRESS_USER_ID_FKEY.getInverseKey());

        return _shippingAddress;
    }

    private transient ShopsPath _shopsCreatedByFkey;

    /**
     * Get the implicit to-many join path to the <code>public.shops</code>
     * table, via the <code>shops_created_by_fkey</code> key
     */
    public ShopsPath shopsCreatedByFkey() {
        if (_shopsCreatedByFkey == null)
            _shopsCreatedByFkey = new ShopsPath(this, null, Keys.SHOPS__SHOPS_CREATED_BY_FKEY.getInverseKey());

        return _shopsCreatedByFkey;
    }

    private transient ShopsPath _shopsModifiedByFkey;

    /**
     * Get the implicit to-many join path to the <code>public.shops</code>
     * table, via the <code>shops_modified_by_fkey</code> key
     */
    public ShopsPath shopsModifiedByFkey() {
        if (_shopsModifiedByFkey == null)
            _shopsModifiedByFkey = new ShopsPath(this, null, Keys.SHOPS__SHOPS_MODIFIED_BY_FKEY.getInverseKey());

        return _shopsModifiedByFkey;
    }

    private transient ShopsPath _shopsUserIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.shops</code>
     * table, via the <code>shops_user_id_fkey</code> key
     */
    public ShopsPath shopsUserIdFkey() {
        if (_shopsUserIdFkey == null)
            _shopsUserIdFkey = new ShopsPath(this, null, Keys.SHOPS__SHOPS_USER_ID_FKEY.getInverseKey());

        return _shopsUserIdFkey;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition condition) {
        return new Users(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
